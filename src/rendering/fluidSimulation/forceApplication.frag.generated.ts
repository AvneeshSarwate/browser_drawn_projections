// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const ForceApplicationVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const ForceApplicationFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_forceStrength: f32;
var velocity: texture_2d<f32>;
var velocitySampler: sampler;
var forces: texture_2d<f32>;
var forcesSampler: sampler;

// Source fragment function
struct ForceApplicationUniforms {
  forceStrength: f32,
};

fn pass0(
  uv: vec2f,
  uniforms: ForceApplicationUniforms,
  velocity: texture_2d<f32>,
  velocitySampler: sampler,
  forces: texture_2d<f32>,
  forcesSampler: sampler,
) -> vec4f {
  let vel = textureSample(velocity, velocitySampler, uv).xy;
  
  let forceSample = textureSample(forces, forcesSampler, vec2f(uv.x, 1.0 - uv.y));
  
  let a = max(forceSample.a, 1e-4);
  let forceDir = forceSample.xy / a;
  let encodedForce = forceDir * 2.0 - vec2f(1.0);
  
  let newVel = vel + encodedForce * uniforms.forceStrength * a;
  
  return vec4f(newVel, 0.0, 1.0);
}

fn load_ForceApplicationUniforms() -> ForceApplicationUniforms {
  return ForceApplicationUniforms(
  uniforms.uniforms_forceStrength
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_ForceApplicationUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, velocity, velocitySampler, forces, forcesSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const ForceApplicationPassCount = 1 as const;
export const ForceApplicationPrimaryTextureName = 'velocity' as const;

export const ForceApplicationPassTextureSources = [
  [
    { binding: 'velocity', source: { kind: 'input', key: 'velocity' } },
    { binding: 'forces', source: { kind: 'input', key: 'forces' } },
  ],
] as const;

export interface ForceApplicationUniforms {
  forceStrength: number;
}

export function setForceApplicationUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<ForceApplicationUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.forceStrength !== undefined) {
    material.setFloat('uniforms_forceStrength', uniforms.forceStrength);
  }
}

export type ForceApplicationTextureName = 'velocity' | 'forces';
export interface ForceApplicationInputs {
  velocity: ShaderSource;
  forces: ShaderSource;
}

export interface ForceApplicationMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: ForceApplicationTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: ForceApplicationTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<ForceApplicationUniforms>): void;
}

export interface ForceApplicationMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createForceApplicationMaterial(scene: BABYLON.Scene, options: ForceApplicationMaterialOptions = {}): ForceApplicationMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for ForceApplication. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'ForceApplicationMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = ForceApplicationVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = ForceApplicationFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_forceStrength'],
    samplers: ['velocity', 'forces'],
    samplerObjects: ['velocitySampler', 'forcesSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'velocity': 'velocitySampler', 'forces': 'forcesSampler' } as const;

  const handles: ForceApplicationMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setForceApplicationUniforms(material, values),
  };

  return handles;
}

export class ForceApplicationEffect extends CustomShaderEffect<ForceApplicationUniforms, ForceApplicationInputs> {
  effectName = 'ForceApplication'

  constructor(engine: BABYLON.WebGPUEngine, inputs: ForceApplicationInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createForceApplicationMaterial(sceneRef, options),
      textureInputKeys: ['velocity', 'forces'],
      textureBindingKeys: ['velocity', 'forces'],
      passTextureSources: ForceApplicationPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'velocity',
      width,
      height,
      materialName: 'ForceApplicationMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<ForceApplicationInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { forceStrength?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.forceStrength !== undefined) {
      record['forceStrength'] = uniforms.forceStrength;
    }
    super.setUniforms(record);
  }
}

