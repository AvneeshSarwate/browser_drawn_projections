// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision } from '../shaderFXBabylon';
export const PressureJacobiVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const PressureJacobiFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
var pressure: texture_2d<f32>;
var pressureSampler: sampler;
var divergence: texture_2d<f32>;
var divergenceSampler: sampler;

// Source fragment function
fn safeSample(tex: texture_2d<f32>, samp: sampler, uv: vec2f) -> f32 {
  let clampedUv = clamp(uv, vec2f(0.0), vec2f(1.0));
  return textureSample(tex, samp, clampedUv).x;
}

fn texelSize(tex: texture_2d<f32>) -> vec2f {
  let dims = textureDimensions(tex);
  return vec2f(
    select(1.0 / f32(dims.x), 0.0, dims.x == 0u),
    select(1.0 / f32(dims.y), 0.0, dims.y == 0u)
  );
}

fn pass0(
  uv: vec2f,
  pressure: texture_2d<f32>,
  pressureSampler: sampler,
  divergence: texture_2d<f32>,
  divergenceSampler: sampler,
) -> vec4f {
  let texel = texelSize(pressure);
  
  let pL = safeSample(pressure, pressureSampler, uv - vec2f(texel.x, 0.0));
  let pR = safeSample(pressure, pressureSampler, uv + vec2f(texel.x, 0.0));
  let pB = safeSample(pressure, pressureSampler, uv - vec2f(0.0, texel.y));
  let pT = safeSample(pressure, pressureSampler, uv + vec2f(0.0, texel.y));
  
  let div = safeSample(divergence, divergenceSampler, uv);
  
  let p = 0.25 * (pL + pR + pB + pT - div);
  
  return vec4f(p, 0.0, 0.0, 1.0);
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, pressure, pressureSampler, divergence, divergenceSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const PressureJacobiPassCount = 1 as const;
export const PressureJacobiPrimaryTextureName = 'pressure' as const;

export const PressureJacobiPassTextureSources = [
  [
    { binding: 'pressure', source: { kind: 'input', key: 'pressure' } },
    { binding: 'divergence', source: { kind: 'input', key: 'divergence' } },
  ],
] as const;

export type PressureJacobiUniforms = Record<string, never>;
export function setPressureJacobiUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<PressureJacobiUniforms>): void {}

export type PressureJacobiTextureName = 'pressure' | 'divergence';
export interface PressureJacobiInputs {
  pressure: ShaderSource;
  divergence: ShaderSource;
}

export interface PressureJacobiMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: PressureJacobiTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: PressureJacobiTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<PressureJacobiUniforms>): void;
}

export interface PressureJacobiMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createPressureJacobiMaterial(scene: BABYLON.Scene, options: PressureJacobiMaterialOptions = {}): PressureJacobiMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for PressureJacobi. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'PressureJacobiMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = PressureJacobiVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = PressureJacobiFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['pressure', 'divergence'],
    samplerObjects: ['pressureSampler', 'divergenceSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'pressure': 'pressureSampler', 'divergence': 'divergenceSampler' } as const;

  const handles: PressureJacobiMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class PressureJacobiEffect extends CustomShaderEffect<PressureJacobiUniforms, PressureJacobiInputs> {
  effectName = 'PressureJacobi'

  constructor(engine: BABYLON.WebGPUEngine, inputs: PressureJacobiInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createPressureJacobiMaterial(sceneRef, options),
      textureInputKeys: ['pressure', 'divergence'],
      textureBindingKeys: ['pressure', 'divergence'],
      passTextureSources: PressureJacobiPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'pressure',
      width,
      height,
      materialName: 'PressureJacobiMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<PressureJacobiInputs>): void {
    super.setSrcs(inputs);
  }
}

