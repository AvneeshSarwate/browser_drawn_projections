// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision } from '../shaderFXBabylon';
export const AddVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const AddFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
var base: texture_2d<f32>;
var baseSampler: sampler;
var delta: texture_2d<f32>;
var deltaSampler: sampler;

// Source fragment function
fn pass0(
  uv: vec2f,
  base: texture_2d<f32>,
  baseSampler: sampler,
  delta: texture_2d<f32>,
  deltaSampler: sampler,
) -> vec4f {
  let b = textureSample(base, baseSampler, uv);
  let d = textureSample(delta, deltaSampler, uv);
  return b + d;
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, base, baseSampler, delta, deltaSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const AddPassCount = 1 as const;
export const AddPrimaryTextureName = 'base' as const;

export const AddPassTextureSources = [
  [
    { binding: 'base', source: { kind: 'input', key: 'base' } },
    { binding: 'delta', source: { kind: 'input', key: 'delta' } },
  ],
] as const;

export type AddUniforms = Record<string, never>;
export function setAddUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<AddUniforms>): void {}

export type AddTextureName = 'base' | 'delta';
export interface AddInputs {
  base: ShaderSource;
  delta: ShaderSource;
}

export interface AddMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: AddTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: AddTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<AddUniforms>): void;
}

export interface AddMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createAddMaterial(scene: BABYLON.Scene, options: AddMaterialOptions = {}): AddMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Add. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'AddMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = AddVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = AddFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['base', 'delta'],
    samplerObjects: ['baseSampler', 'deltaSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'base': 'baseSampler', 'delta': 'deltaSampler' } as const;

  const handles: AddMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class AddEffect extends CustomShaderEffect<AddUniforms, AddInputs> {
  effectName = 'Add'

  constructor(engine: BABYLON.WebGPUEngine, inputs: AddInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createAddMaterial(sceneRef, options),
      textureInputKeys: ['base', 'delta'],
      textureBindingKeys: ['base', 'delta'],
      passTextureSources: AddPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'base',
      width,
      height,
      materialName: 'AddMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<AddInputs>): void {
    super.setSrcs(inputs);
  }
}

