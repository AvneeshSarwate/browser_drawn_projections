// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision } from '../shaderFXBabylon';
export const CurlVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const CurlFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
var velocity: texture_2d<f32>;
var velocitySampler: sampler;

// Source fragment function
fn texelSize(textureRef: texture_2d<f32>) -> vec2f {
  let dims = textureDimensions(textureRef);
  let sx = select(1.0 / f32(dims.x), 0.0, dims.x == 0u);
  let sy = select(1.0 / f32(dims.y), 0.0, dims.y == 0u);
  return vec2f(sx, sy);
}

fn pass0(
  uv: vec2f,
  velocity: texture_2d<f32>,
  velocitySampler: sampler,
) -> vec4f {
  let texel = texelSize(velocity);
  let center = textureSample(velocity, velocitySampler, uv).xy;

  let leftUv = uv - vec2f(texel.x, 0.0);
  var leftY = textureSample(velocity, velocitySampler, leftUv).y;

  let rightUv = uv + vec2f(texel.x, 0.0);
  var rightY = textureSample(velocity, velocitySampler, rightUv).y;

  let topUv = uv + vec2f(0.0, texel.y);
  var topX = textureSample(velocity, velocitySampler, topUv).x;

  let bottomUv = uv - vec2f(0.0, texel.y);
  var bottomX = textureSample(velocity, velocitySampler, bottomUv).x;

  let curl = (rightY - leftY) - (topX - bottomX);
  return vec4f(0.5 * curl, 0.0, 0.0, 1.0);
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, velocity, velocitySampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const CurlPassCount = 1 as const;
export const CurlPrimaryTextureName = 'velocity' as const;

export const CurlPassTextureSources = [
  [
    { binding: 'velocity', source: { kind: 'input', key: 'velocity' } },
  ],
] as const;

export type CurlUniforms = Record<string, never>;
export function setCurlUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<CurlUniforms>): void {}

export type CurlTextureName = 'velocity';
export interface CurlInputs {
  velocity: ShaderSource;
}

export interface CurlMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: CurlTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: CurlTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<CurlUniforms>): void;
}

export interface CurlMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createCurlMaterial(scene: BABYLON.Scene, options: CurlMaterialOptions = {}): CurlMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Curl. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'CurlMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = CurlVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = CurlFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['velocity'],
    samplerObjects: ['velocitySampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'velocity': 'velocitySampler' } as const;

  const handles: CurlMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class CurlEffect extends CustomShaderEffect<CurlUniforms, CurlInputs> {
  effectName = 'Curl'

  constructor(engine: BABYLON.WebGPUEngine, inputs: CurlInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createCurlMaterial(sceneRef, options),
      textureInputKeys: ['velocity'],
      textureBindingKeys: ['velocity'],
      passTextureSources: CurlPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'velocity',
      width,
      height,
      materialName: 'CurlMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<CurlInputs>): void {
    super.setSrcs(inputs);
  }
}

