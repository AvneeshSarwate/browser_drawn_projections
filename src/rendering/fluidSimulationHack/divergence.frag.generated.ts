// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision } from '../shaderFXBabylon';
export const DivergenceVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const DivergenceFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
var velocity: texture_2d<f32>;
var velocitySampler: sampler;

// Source fragment function
fn texelSize(tex: texture_2d<f32>) -> vec2f {
  let dims = textureDimensions(tex);
  return 1.0 / vec2f(f32(dims.x), f32(dims.y));
}

fn pass0(
  uv: vec2f,
  velocity: texture_2d<f32>,
  velocitySampler: sampler,
) -> vec4f {
  let texel = texelSize(velocity);
  let center = textureSample(velocity, velocitySampler, clamp(uv, vec2f(0.0), vec2f(1.0))).xy;
  
  let leftUv = uv - vec2f(texel.x, 0.0);
  var left = textureSample(velocity, velocitySampler, leftUv).xy;
  if (leftUv.x < 0.0) {
    left.x = -center.x;
  }
  
  let rightUv = uv + vec2f(texel.x, 0.0);
  var right = textureSample(velocity, velocitySampler, rightUv).xy;
  if (rightUv.x > 1.0) {
    right.x = -center.x;
  }
  
  let topUv = uv + vec2f(0.0, texel.y);
  var top = textureSample(velocity, velocitySampler, topUv).xy;
  if (topUv.y > 1.0) {
    top.y = -center.y;
  }
  
  let bottomUv = uv - vec2f(0.0, texel.y);
  var bottom = textureSample(velocity, velocitySampler, bottomUv).xy;
  if (bottomUv.y < 0.0) {
    bottom.y = -center.y;
  }
  
  let div = 0.5 * ((right.x - left.x) + (top.y - bottom.y));
  
  return vec4f(div, 0.0, 0.0, 1.0);
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, velocity, velocitySampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const DivergencePassCount = 1 as const;
export const DivergencePrimaryTextureName = 'velocity' as const;

export const DivergencePassTextureSources = [
  [
    { binding: 'velocity', source: { kind: 'input', key: 'velocity' } },
  ],
] as const;

export type DivergenceUniforms = Record<string, never>;
export function setDivergenceUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<DivergenceUniforms>): void {}

export type DivergenceTextureName = 'velocity';
export interface DivergenceInputs {
  velocity: ShaderSource;
}

export interface DivergenceMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: DivergenceTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: DivergenceTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<DivergenceUniforms>): void;
}

export interface DivergenceMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createDivergenceMaterial(scene: BABYLON.Scene, options: DivergenceMaterialOptions = {}): DivergenceMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Divergence. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'DivergenceMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = DivergenceVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = DivergenceFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['velocity'],
    samplerObjects: ['velocitySampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'velocity': 'velocitySampler' } as const;

  const handles: DivergenceMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class DivergenceEffect extends CustomShaderEffect<DivergenceUniforms, DivergenceInputs> {
  effectName = 'Divergence'

  constructor(engine: BABYLON.WebGPUEngine, inputs: DivergenceInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createDivergenceMaterial(sceneRef, options),
      textureInputKeys: ['velocity'],
      textureBindingKeys: ['velocity'],
      passTextureSources: DivergencePassTextureSources,
      passCount: 1,
      primaryTextureKey: 'velocity',
      width,
      height,
      materialName: 'DivergenceMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<DivergenceInputs>): void {
    super.setSrcs(inputs);
  }
}

