// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const DyeForceApplicationVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const DyeForceApplicationFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_injectionStrength: f32;
var dye: texture_2d<f32>;
var dyeSampler: sampler;
var forces: texture_2d<f32>;
var forcesSampler: sampler;

// Source fragment function
struct DyeForceApplicationUniforms {
  injectionStrength: f32,
}

fn clampUv(uv: vec2f) -> vec2f {
  return clamp(uv, vec2f(0.0), vec2f(1.0));
}

fn pass0(
  uv: vec2f,
  uniforms: DyeForceApplicationUniforms,
  dye: texture_2d<f32>,
  dyeSampler: sampler,
  forces: texture_2d<f32>,
  forcesSampler: sampler,
) -> vec4f {
  let base = textureSample(dye, dyeSampler, clampUv(uv)).xyz;
  let forceSample = textureSample(forces, forcesSampler, clampUv(uv));
  let intensity = clamp(forceSample.a, 0.0, 1.0);
  let injected = forceSample.rgb * (uniforms.injectionStrength * intensity);
  let result = min(base + injected, vec3f(1.0));
  return vec4f(result, 1.0);
}

fn load_DyeForceApplicationUniforms() -> DyeForceApplicationUniforms {
  return DyeForceApplicationUniforms(
  uniforms.uniforms_injectionStrength
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_DyeForceApplicationUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, dye, dyeSampler, forces, forcesSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const DyeForceApplicationPassCount = 1 as const;
export const DyeForceApplicationPrimaryTextureName = 'dye' as const;

export const DyeForceApplicationPassTextureSources = [
  [
    { binding: 'dye', source: { kind: 'input', key: 'dye' } },
    { binding: 'forces', source: { kind: 'input', key: 'forces' } },
  ],
] as const;

export interface DyeForceApplicationUniforms {
  injectionStrength: number;
}

export function setDyeForceApplicationUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<DyeForceApplicationUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.injectionStrength !== undefined) {
    material.setFloat('uniforms_injectionStrength', uniforms.injectionStrength);
  }
}

export type DyeForceApplicationTextureName = 'dye' | 'forces';
export interface DyeForceApplicationInputs {
  dye: ShaderSource;
  forces: ShaderSource;
}

export interface DyeForceApplicationMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: DyeForceApplicationTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: DyeForceApplicationTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<DyeForceApplicationUniforms>): void;
}

export interface DyeForceApplicationMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createDyeForceApplicationMaterial(scene: BABYLON.Scene, options: DyeForceApplicationMaterialOptions = {}): DyeForceApplicationMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for DyeForceApplication. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'DyeForceApplicationMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = DyeForceApplicationVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = DyeForceApplicationFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_injectionStrength'],
    samplers: ['dye', 'forces'],
    samplerObjects: ['dyeSampler', 'forcesSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'dye': 'dyeSampler', 'forces': 'forcesSampler' } as const;

  const handles: DyeForceApplicationMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setDyeForceApplicationUniforms(material, values),
  };

  return handles;
}

export class DyeForceApplicationEffect extends CustomShaderEffect<DyeForceApplicationUniforms, DyeForceApplicationInputs> {
  effectName = 'DyeForceApplication'

  constructor(engine: BABYLON.WebGPUEngine, inputs: DyeForceApplicationInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createDyeForceApplicationMaterial(sceneRef, options),
      textureInputKeys: ['dye', 'forces'],
      textureBindingKeys: ['dye', 'forces'],
      passTextureSources: DyeForceApplicationPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'dye',
      width,
      height,
      materialName: 'DyeForceApplicationMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<DyeForceApplicationInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { injectionStrength?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.injectionStrength !== undefined) {
      record['injectionStrength'] = uniforms.injectionStrength;
    }
    super.setUniforms(record);
  }
}

