// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const SplatUnifiedVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const SplatUnifiedFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_mode: u32;
uniform uniforms_point: vec2f;
uniform uniforms_color: vec3f;
uniform uniforms_radius: f32;
uniform uniforms_aspectRatio: f32;
uniform uniforms_strength: f32;
var base: texture_2d<f32>;
var baseSampler: sampler;

// Source fragment function
struct SplatUniforms {
  mode: u32,
  point: vec2<f32>,
  color: vec3<f32>,
  radius: f32,
  aspectRatio: f32,
  strength: f32,
}

// Pass 0: Compute the Gaussian impulse delta
// This is a pure function that computes the splat without reading base
fn pass0(
  uv: vec2f,
  uniforms: SplatUniforms,
  base: texture_2d<f32>,
  baseSampler: sampler,
) -> vec4f {
  let clampedUv = clamp(uv, vec2f(0.0), vec2f(1.0));
  
  var offset = clampedUv - uniforms.point;
  offset.x = offset.x * uniforms.aspectRatio;
  
  let influence = exp(-dot(offset, offset) / max(uniforms.radius, 1e-6));
  let delta = uniforms.color * influence;
  
  return vec4f(delta, 1.0);
}

// Pass 1: Apply the delta to the base based on mode
fn pass1(
  uv: vec2f,
  uniforms: SplatUniforms,
  base: texture_2d<f32>,
  baseSampler: sampler,
  pass0Texture: texture_2d<f32>,
  pass0Sampler: sampler,
) -> vec4f {
  let clampedUv = clamp(uv, vec2f(0.0), vec2f(1.0));
  let baseColor = textureSample(base, baseSampler, clampedUv);
  let delta = textureSample(pass0Texture, pass0Sampler, clampedUv);
  
  // Mode-based behavior
  if (uniforms.mode == 0u) {
    // Passthrough mode: just return base
    return baseColor;
  } else if (uniforms.mode == 1u) {
    // Additive mode: add delta * strength to base
    return vec4f(baseColor.xyz + delta.xyz * uniforms.strength, 1.0);
  } else {
    // Reserved for exotic operations (mode >= 2)
    return baseColor;
  }
}

fn load_SplatUniforms() -> SplatUniforms {
  return SplatUniforms(
  uniforms.uniforms_mode,
  uniforms.uniforms_point,
  uniforms.uniforms_color,
  uniforms.uniforms_radius,
  uniforms.uniforms_aspectRatio,
  uniforms.uniforms_strength
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_SplatUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, base, baseSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_mode: u32;
uniform uniforms_point: vec2f;
uniform uniforms_color: vec3f;
uniform uniforms_radius: f32;
uniform uniforms_aspectRatio: f32;
uniform uniforms_strength: f32;
var base: texture_2d<f32>;
var baseSampler: sampler;
var pass0Texture: texture_2d<f32>;
var pass0Sampler: sampler;

// Source fragment function
struct SplatUniforms {
  mode: u32,
  point: vec2<f32>,
  color: vec3<f32>,
  radius: f32,
  aspectRatio: f32,
  strength: f32,
}

// Pass 0: Compute the Gaussian impulse delta
// This is a pure function that computes the splat without reading base
fn pass0(
  uv: vec2f,
  uniforms: SplatUniforms,
  base: texture_2d<f32>,
  baseSampler: sampler,
) -> vec4f {
  let clampedUv = clamp(uv, vec2f(0.0), vec2f(1.0));
  
  var offset = clampedUv - uniforms.point;
  offset.x = offset.x * uniforms.aspectRatio;
  
  let influence = exp(-dot(offset, offset) / max(uniforms.radius, 1e-6));
  let delta = uniforms.color * influence;
  
  return vec4f(delta, 1.0);
}

// Pass 1: Apply the delta to the base based on mode
fn pass1(
  uv: vec2f,
  uniforms: SplatUniforms,
  base: texture_2d<f32>,
  baseSampler: sampler,
  pass0Texture: texture_2d<f32>,
  pass0Sampler: sampler,
) -> vec4f {
  let clampedUv = clamp(uv, vec2f(0.0), vec2f(1.0));
  let baseColor = textureSample(base, baseSampler, clampedUv);
  let delta = textureSample(pass0Texture, pass0Sampler, clampedUv);
  
  // Mode-based behavior
  if (uniforms.mode == 0u) {
    // Passthrough mode: just return base
    return baseColor;
  } else if (uniforms.mode == 1u) {
    // Additive mode: add delta * strength to base
    return vec4f(baseColor.xyz + delta.xyz * uniforms.strength, 1.0);
  } else {
    // Reserved for exotic operations (mode >= 2)
    return baseColor;
  }
}

fn load_SplatUniforms() -> SplatUniforms {
  return SplatUniforms(
  uniforms.uniforms_mode,
  uniforms.uniforms_point,
  uniforms.uniforms_color,
  uniforms.uniforms_radius,
  uniforms.uniforms_aspectRatio,
  uniforms.uniforms_strength
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_SplatUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass1(uv_local, uniforms_value, base, baseSampler, pass0Texture, pass0Sampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass1
] as const;
export const SplatUnifiedPassCount = 2 as const;
export const SplatUnifiedPrimaryTextureName = 'base' as const;

export const SplatUnifiedPassTextureSources = [
  [
    { binding: 'base', source: { kind: 'input', key: 'base' } },
  ],
  [
    { binding: 'base', source: { kind: 'input', key: 'base' } },
    { binding: 'pass0Texture', source: { kind: 'pass', passIndex: 0 } },
  ],
] as const;

function ensureVector2(value: BABYLON.Vector2 | readonly [number, number]): BABYLON.Vector2 {
  return value instanceof BABYLON.Vector2 ? value : BABYLON.Vector2.FromArray(value as readonly [number, number]);
}
function ensureVector3(value: BABYLON.Vector3 | readonly [number, number, number]): BABYLON.Vector3 {
  return value instanceof BABYLON.Vector3 ? value : BABYLON.Vector3.FromArray(value as readonly [number, number, number]);
}

export interface SplatUnifiedSplatUniforms {
  mode: number;
  point: BABYLON.Vector2 | readonly [number, number];
  color: BABYLON.Vector3 | readonly [number, number, number];
  radius: number;
  aspectRatio: number;
  strength: number;
}

export function setSplatUnifiedSplatUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<SplatUnifiedSplatUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.mode !== undefined) {
    material.setUInt('uniforms_mode', uniforms.mode);
  }
  if (uniforms.point !== undefined) {
    material.setVector2('uniforms_point', ensureVector2(uniforms.point));
  }
  if (uniforms.color !== undefined) {
    material.setVector3('uniforms_color', ensureVector3(uniforms.color));
  }
  if (uniforms.radius !== undefined) {
    material.setFloat('uniforms_radius', uniforms.radius);
  }
  if (uniforms.aspectRatio !== undefined) {
    material.setFloat('uniforms_aspectRatio', uniforms.aspectRatio);
  }
  if (uniforms.strength !== undefined) {
    material.setFloat('uniforms_strength', uniforms.strength);
  }
}

export type SplatUnifiedTextureName = 'base' | 'pass0Texture';
export interface SplatUnifiedInputs {
  base: ShaderSource;
}

export interface SplatUnifiedMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: SplatUnifiedTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: SplatUnifiedTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<SplatUnifiedSplatUniforms>): void;
}

export interface SplatUnifiedMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createSplatUnifiedMaterial(scene: BABYLON.Scene, options: SplatUnifiedMaterialOptions = {}): SplatUnifiedMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 2) {
    throw new Error(`Invalid passIndex ${passIndex} for SplatUnified. Expected 0 <= passIndex < 2.`);
  }
  const baseName = options.name ?? 'SplatUnifiedMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = SplatUnifiedVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = SplatUnifiedFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_mode', 'uniforms_point', 'uniforms_color', 'uniforms_radius', 'uniforms_aspectRatio', 'uniforms_strength'],
    samplers: ['base', 'pass0Texture'],
    samplerObjects: ['baseSampler', 'pass0Sampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'base': 'baseSampler', 'pass0Texture': 'pass0Sampler' } as const;

  const handles: SplatUnifiedMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setSplatUnifiedSplatUniforms(material, values),
  };

  return handles;
}

export class SplatUnifiedEffect extends CustomShaderEffect<SplatUnifiedSplatUniforms, SplatUnifiedInputs> {
  effectName = 'SplatUnified'

  constructor(engine: BABYLON.WebGPUEngine, inputs: SplatUnifiedInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createSplatUnifiedMaterial(sceneRef, options),
      textureInputKeys: ['base'],
      textureBindingKeys: ['base', 'pass0Texture'],
      passTextureSources: SplatUnifiedPassTextureSources,
      passCount: 2,
      primaryTextureKey: 'base',
      width,
      height,
      materialName: 'SplatUnifiedMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<SplatUnifiedInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { mode?: Dynamic<number>, point?: Dynamic<BABYLON.Vector2 | readonly [number, number]>, color?: Dynamic<BABYLON.Vector3 | readonly [number, number, number]>, radius?: Dynamic<number>, aspectRatio?: Dynamic<number>, strength?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.mode !== undefined) {
      record['mode'] = uniforms.mode;
    }
    if (uniforms.point !== undefined) {
      record['point'] = uniforms.point;
    }
    if (uniforms.color !== undefined) {
      record['color'] = uniforms.color;
    }
    if (uniforms.radius !== undefined) {
      record['radius'] = uniforms.radius;
    }
    if (uniforms.aspectRatio !== undefined) {
      record['aspectRatio'] = uniforms.aspectRatio;
    }
    if (uniforms.strength !== undefined) {
      record['strength'] = uniforms.strength;
    }
    super.setUniforms(record);
  }
}

