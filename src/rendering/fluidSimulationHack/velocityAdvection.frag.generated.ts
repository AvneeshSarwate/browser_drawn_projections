// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const VelocityAdvectionVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const VelocityAdvectionFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_timeStep: f32;
uniform uniforms_dissipation: f32;
var velocity: texture_2d<f32>;
var velocitySampler: sampler;

// Source fragment function
struct VelocityAdvectionUniforms {
  timeStep: f32,
  dissipation: f32,
};

fn pass0(
  uv: vec2f,
  uniforms: VelocityAdvectionUniforms,
  velocity: texture_2d<f32>,
  velocitySampler: sampler,
) -> vec4f {
  let vel = textureSample(velocity, velocitySampler, uv).xy;
  let dims = textureDimensions(velocity);
  let texel = vec2f(
    select(1.0 / f32(dims.x), 0.0, dims.x == 0u),
    select(1.0 / f32(dims.y), 0.0, dims.y == 0u),
  );
  let prevUv = clamp(uv - vel * uniforms.timeStep * texel, vec2f(0.0), vec2f(1.0));
  
  let advectedVel = textureSample(velocity, velocitySampler, prevUv).xy;
  
  let finalVel = advectedVel * uniforms.dissipation;
  
  return vec4f(finalVel, 0.0, 1.0);
}

fn load_VelocityAdvectionUniforms() -> VelocityAdvectionUniforms {
  return VelocityAdvectionUniforms(
  uniforms.uniforms_timeStep,
  uniforms.uniforms_dissipation
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_VelocityAdvectionUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, velocity, velocitySampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const VelocityAdvectionPassCount = 1 as const;
export const VelocityAdvectionPrimaryTextureName = 'velocity' as const;

export const VelocityAdvectionPassTextureSources = [
  [
    { binding: 'velocity', source: { kind: 'input', key: 'velocity' } },
  ],
] as const;

export interface VelocityAdvectionUniforms {
  timeStep: number;
  dissipation: number;
}

export function setVelocityAdvectionUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<VelocityAdvectionUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.timeStep !== undefined) {
    material.setFloat('uniforms_timeStep', uniforms.timeStep);
  }
  if (uniforms.dissipation !== undefined) {
    material.setFloat('uniforms_dissipation', uniforms.dissipation);
  }
}

export type VelocityAdvectionTextureName = 'velocity';
export interface VelocityAdvectionInputs {
  velocity: ShaderSource;
}

export interface VelocityAdvectionMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: VelocityAdvectionTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: VelocityAdvectionTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<VelocityAdvectionUniforms>): void;
}

export interface VelocityAdvectionMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createVelocityAdvectionMaterial(scene: BABYLON.Scene, options: VelocityAdvectionMaterialOptions = {}): VelocityAdvectionMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for VelocityAdvection. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'VelocityAdvectionMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = VelocityAdvectionVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = VelocityAdvectionFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_timeStep', 'uniforms_dissipation'],
    samplers: ['velocity'],
    samplerObjects: ['velocitySampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'velocity': 'velocitySampler' } as const;

  const handles: VelocityAdvectionMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setVelocityAdvectionUniforms(material, values),
  };

  return handles;
}

export class VelocityAdvectionEffect extends CustomShaderEffect<VelocityAdvectionUniforms, VelocityAdvectionInputs> {
  effectName = 'VelocityAdvection'

  constructor(engine: BABYLON.WebGPUEngine, inputs: VelocityAdvectionInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createVelocityAdvectionMaterial(sceneRef, options),
      textureInputKeys: ['velocity'],
      textureBindingKeys: ['velocity'],
      passTextureSources: VelocityAdvectionPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'velocity',
      width,
      height,
      materialName: 'VelocityAdvectionMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<VelocityAdvectionInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { timeStep?: Dynamic<number>, dissipation?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.timeStep !== undefined) {
      record['timeStep'] = uniforms.timeStep;
    }
    if (uniforms.dissipation !== undefined) {
      record['dissipation'] = uniforms.dissipation;
    }
    super.setUniforms(record);
  }
}

