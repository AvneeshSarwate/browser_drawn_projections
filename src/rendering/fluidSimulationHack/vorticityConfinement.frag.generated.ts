// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const VorticityConfinementVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const VorticityConfinementFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_curlStrength: f32;
uniform uniforms_timeStep: f32;
var velocity: texture_2d<f32>;
var velocitySampler: sampler;
var curl: texture_2d<f32>;
var curlSampler: sampler;

// Source fragment function
struct VorticityConfinementUniforms {
  curlStrength: f32,
  timeStep: f32,
}

fn texelSize(textureRef: texture_2d<f32>) -> vec2f {
  let dims = textureDimensions(textureRef);
  let sx = select(1.0 / f32(dims.x), 0.0, dims.x == 0u);
  let sy = select(1.0 / f32(dims.y), 0.0, dims.y == 0u);
  return vec2f(sx, sy);
}

fn clampUv(uv: vec2f) -> vec2f {
  return clamp(uv, vec2f(0.0), vec2f(1.0));
}

fn pass0(
  uv: vec2f,
  uniforms: VorticityConfinementUniforms,
  velocity: texture_2d<f32>,
  velocitySampler: sampler,
  curl: texture_2d<f32>,
  curlSampler: sampler,
) -> vec4f {
  let texel = texelSize(velocity);
  let centerVelocity = textureSample(velocity, velocitySampler, clampUv(uv)).xy;
  let centerCurl = textureSample(curl, curlSampler, clampUv(uv)).x;

  let leftUv = uv - vec2f(texel.x, 0.0);
  var curlL = textureSample(curl, curlSampler, clampUv(leftUv)).x;

  let rightUv = uv + vec2f(texel.x, 0.0);
  var curlR = textureSample(curl, curlSampler, clampUv(rightUv)).x;

  let topUv = uv + vec2f(0.0, texel.y);
  var curlT = textureSample(curl, curlSampler, clampUv(topUv)).x;

  let bottomUv = uv - vec2f(0.0, texel.y);
  var curlB = textureSample(curl, curlSampler, clampUv(bottomUv)).x;

  var force = 0.5 * vec2f(abs(curlT) - abs(curlB), abs(curlR) - abs(curlL));
  force = force * (1.0 / max(length(force), 1e-4));
  force = force * (uniforms.curlStrength * centerCurl);
  force.y = -force.y;

  var updatedVelocity = centerVelocity + force * uniforms.timeStep;
  updatedVelocity = clamp(updatedVelocity, vec2f(-1000.0), vec2f(1000.0));

  return vec4f(updatedVelocity, 0.0, 1.0);
}

fn load_VorticityConfinementUniforms() -> VorticityConfinementUniforms {
  return VorticityConfinementUniforms(
  uniforms.uniforms_curlStrength,
  uniforms.uniforms_timeStep
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_VorticityConfinementUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, velocity, velocitySampler, curl, curlSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const VorticityConfinementPassCount = 1 as const;
export const VorticityConfinementPrimaryTextureName = 'velocity' as const;

export const VorticityConfinementPassTextureSources = [
  [
    { binding: 'velocity', source: { kind: 'input', key: 'velocity' } },
    { binding: 'curl', source: { kind: 'input', key: 'curl' } },
  ],
] as const;

export interface VorticityConfinementUniforms {
  curlStrength: number;
  timeStep: number;
}

export function setVorticityConfinementUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<VorticityConfinementUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.curlStrength !== undefined) {
    material.setFloat('uniforms_curlStrength', uniforms.curlStrength);
  }
  if (uniforms.timeStep !== undefined) {
    material.setFloat('uniforms_timeStep', uniforms.timeStep);
  }
}

export type VorticityConfinementTextureName = 'velocity' | 'curl';
export interface VorticityConfinementInputs {
  velocity: ShaderSource;
  curl: ShaderSource;
}

export interface VorticityConfinementMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: VorticityConfinementTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: VorticityConfinementTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<VorticityConfinementUniforms>): void;
}

export interface VorticityConfinementMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createVorticityConfinementMaterial(scene: BABYLON.Scene, options: VorticityConfinementMaterialOptions = {}): VorticityConfinementMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for VorticityConfinement. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'VorticityConfinementMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = VorticityConfinementVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = VorticityConfinementFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_curlStrength', 'uniforms_timeStep'],
    samplers: ['velocity', 'curl'],
    samplerObjects: ['velocitySampler', 'curlSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'velocity': 'velocitySampler', 'curl': 'curlSampler' } as const;

  const handles: VorticityConfinementMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setVorticityConfinementUniforms(material, values),
  };

  return handles;
}

export class VorticityConfinementEffect extends CustomShaderEffect<VorticityConfinementUniforms, VorticityConfinementInputs> {
  effectName = 'VorticityConfinement'

  constructor(engine: BABYLON.WebGPUEngine, inputs: VorticityConfinementInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createVorticityConfinementMaterial(sceneRef, options),
      textureInputKeys: ['velocity', 'curl'],
      textureBindingKeys: ['velocity', 'curl'],
      passTextureSources: VorticityConfinementPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'velocity',
      width,
      height,
      materialName: 'VorticityConfinementMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<VorticityConfinementInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { curlStrength?: Dynamic<number>, timeStep?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.curlStrength !== undefined) {
      record['curlStrength'] = uniforms.curlStrength;
    }
    if (uniforms.timeStep !== undefined) {
      record['timeStep'] = uniforms.timeStep;
    }
    super.setUniforms(record);
  }
}

