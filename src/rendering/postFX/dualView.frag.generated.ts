// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision } from '../shaderFXBabylon';
export const DualViewVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const DualViewFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
var left: texture_2d<f32>;
var leftSampler: sampler;
var right: texture_2d<f32>;
var rightSampler: sampler;

// Source fragment function
fn pass0(
  uv: vec2f,
  left: texture_2d<f32>,
  leftSampler: sampler,
  right: texture_2d<f32>,
  rightSampler: sampler,
) -> vec4f {
  let halfSplit = 0.5;
  if (uv.x < halfSplit) {
    let localUv = vec2f(uv.x / halfSplit, uv.y);
    return textureSample(left, leftSampler, localUv);
  }
  let localUv = vec2f((uv.x - halfSplit) / (1.0 - halfSplit), uv.y);
  return textureSample(right, rightSampler, localUv);
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, left, leftSampler, right, rightSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const DualViewPassCount = 1 as const;
export const DualViewPrimaryTextureName = 'left' as const;

export const DualViewPassTextureSources = [
  [
    { binding: 'left', source: { kind: 'input', key: 'left' } },
    { binding: 'right', source: { kind: 'input', key: 'right' } },
  ],
] as const;

export type DualViewUniforms = Record<string, never>;
export function setDualViewUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<DualViewUniforms>): void {}

export type DualViewTextureName = 'left' | 'right';
export interface DualViewInputs {
  left: ShaderSource;
  right: ShaderSource;
}

export interface DualViewMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: DualViewTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: DualViewTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<DualViewUniforms>): void;
}

export interface DualViewMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createDualViewMaterial(scene: BABYLON.Scene, options: DualViewMaterialOptions = {}): DualViewMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for DualView. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'DualViewMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = DualViewVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = DualViewFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['left', 'right'],
    samplerObjects: ['leftSampler', 'rightSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'left': 'leftSampler', 'right': 'rightSampler' } as const;

  const handles: DualViewMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class DualViewEffect extends CustomShaderEffect<DualViewUniforms, DualViewInputs> {
  effectName = 'DualView'

  constructor(engine: BABYLON.WebGPUEngine, inputs: DualViewInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createDualViewMaterial(sceneRef, options),
      textureInputKeys: ['left', 'right'],
      textureBindingKeys: ['left', 'right'],
      passTextureSources: DualViewPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'left',
      width,
      height,
      materialName: 'DualViewMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<DualViewInputs>): void {
    super.setSrcs(inputs);
  }
}

