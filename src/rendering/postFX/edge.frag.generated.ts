// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const EdgeVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const EdgeFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_channelMode: u32;
uniform uniforms_blackLevel: f32;
uniform uniforms_strength: f32;
uniform uniforms_sampleStep: vec2f;
uniform uniforms_sampleStepUnit: u32;
uniform uniforms_edgeColor: vec4f;
uniform uniforms_alphaMode: u32;
uniform uniforms_composite: u32;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
struct EdgeUniforms {
  channelMode: u32, // 0
  blackLevel: f32, // 0.0
  strength: f32, // 1.0
  sampleStep: vec2f, // [1.0, 1.0]
  sampleStepUnit: u32, // 1
  edgeColor: vec4f, // [1.0, 1.0, 1.0, 1.0]
  alphaMode: u32, // 0
  composite: u32, // 1
};

fn pass0(uv: vec2f, uniforms: EdgeUniforms, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  let dims = textureDimensions(src);
  let texelSize = vec2f(
    select(1.0 / f32(dims.x), 0.0, dims.x == 0u),
    select(1.0 / f32(dims.y), 0.0, dims.y == 0u),
  );

  var step = uniforms.sampleStep;
  if (uniforms.sampleStepUnit != 0u) {
    step = uniforms.sampleStep * texelSize;
  }
  let eps = 1e-6;
  if (abs(step.x) < eps) {
    step.x = texelSize.x;
  }
  if (abs(step.y) < eps) {
    step.y = texelSize.y;
  }

  let baseColor = textureSample(src, srcSampler, uv);
  var baseValue = 0.0;
  switch uniforms.channelMode {
    case 0u: {
      baseValue = dot(baseColor.rgb, vec3f(0.2126, 0.7152, 0.0722));
    }
    case 1u: {
      baseValue = baseColor.r;
    }
    case 2u: {
      baseValue = baseColor.g;
    }
    case 3u: {
      baseValue = baseColor.b;
    }
    case 4u: {
      baseValue = baseColor.a;
    }
    case 5u: {
      baseValue = (baseColor.r + baseColor.g + baseColor.b) / 3.0;
    }
    case 6u: {
      baseValue = (baseColor.r + baseColor.g + baseColor.b + baseColor.a) * 0.25;
    }
    default: {
      baseValue = dot(baseColor.rgb, vec3f(0.2126, 0.7152, 0.0722));
    }
  }
  baseValue = max(baseValue - uniforms.blackLevel, 0.0);

  var maxDiff = 0.0;

  for (var i = 0u; i < 8u; i = i + 1u) {
    var offset = vec2f(step.x, 0.0);
    switch i {
      case 0u: {
        offset = vec2f(step.x, 0.0);
      }
      case 1u: {
        offset = vec2f(-step.x, 0.0);
      }
      case 2u: {
        offset = vec2f(0.0, step.y);
      }
      case 3u: {
        offset = vec2f(0.0, -step.y);
      }
      case 4u: {
        offset = vec2f(step.x, step.y);
      }
      case 5u: {
        offset = vec2f(-step.x, step.y);
      }
      case 6u: {
        offset = vec2f(step.x, -step.y);
      }
      default: {
        offset = vec2f(-step.x, -step.y);
      }
    }
    let sampleUV = uv + offset;
    let neighborColor = textureSample(src, srcSampler, sampleUV);
    var neighborValue = 0.0;
    switch uniforms.channelMode {
      case 0u: {
        neighborValue = dot(neighborColor.rgb, vec3f(0.2126, 0.7152, 0.0722));
      }
      case 1u: {
        neighborValue = neighborColor.r;
      }
      case 2u: {
        neighborValue = neighborColor.g;
      }
      case 3u: {
        neighborValue = neighborColor.b;
      }
      case 4u: {
        neighborValue = neighborColor.a;
      }
      case 5u: {
        neighborValue = (neighborColor.r + neighborColor.g + neighborColor.b) / 3.0;
      }
      case 6u: {
        neighborValue = (neighborColor.r + neighborColor.g + neighborColor.b + neighborColor.a) * 0.25;
      }
      default: {
        neighborValue = dot(neighborColor.rgb, vec3f(0.2126, 0.7152, 0.0722));
      }
    }
    neighborValue = max(neighborValue - uniforms.blackLevel, 0.0);
    maxDiff = max(maxDiff, abs(baseValue - neighborValue));
  }

  let intensity = clamp(maxDiff * uniforms.strength, 0.0, 1.0);
  let edgeRgb = uniforms.edgeColor.rgb * intensity;

  var edgeAlpha = uniforms.edgeColor.a * intensity;
  switch uniforms.alphaMode {
    case 1u: {
      edgeAlpha = 1.0;
    }
    case 2u: {
      edgeAlpha = 0.0;
    }
    default: {
      edgeAlpha = uniforms.edgeColor.a * intensity;
    }
  }

  if (uniforms.composite != 0u) {
    let composedRgb = clamp(baseColor.rgb + edgeRgb * edgeAlpha, vec3f(0.0), vec3f(1.0));
    var composedAlpha = baseColor.a;
    switch uniforms.alphaMode {
      case 0u: {
        composedAlpha = clamp(max(baseColor.a, edgeAlpha), 0.0, 1.0);
      }
      case 1u: {
        composedAlpha = 1.0;
      }
      case 2u: {
        composedAlpha = 0.0;
      }
      default: {
        composedAlpha = clamp(max(baseColor.a, edgeAlpha), 0.0, 1.0);
      }
    }
    return vec4f(composedRgb, composedAlpha);
  }

  return vec4f(edgeRgb, edgeAlpha);
}

fn load_EdgeUniforms() -> EdgeUniforms {
  return EdgeUniforms(
  uniforms.uniforms_channelMode,
  uniforms.uniforms_blackLevel,
  uniforms.uniforms_strength,
  uniforms.uniforms_sampleStep,
  uniforms.uniforms_sampleStepUnit,
  uniforms.uniforms_edgeColor,
  uniforms.uniforms_alphaMode,
  uniforms.uniforms_composite
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_EdgeUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const EdgePassCount = 1 as const;
export const EdgePrimaryTextureName = 'src' as const;

export const EdgePassTextureSources = [
  [
    { binding: 'src', source: { kind: 'input', key: 'src' } },
  ],
] as const;

function ensureVector2(value: BABYLON.Vector2 | readonly [number, number]): BABYLON.Vector2 {
  return value instanceof BABYLON.Vector2 ? value : BABYLON.Vector2.FromArray(value as readonly [number, number]);
}
function ensureVector4(value: BABYLON.Vector4 | readonly [number, number, number, number]): BABYLON.Vector4 {
  return value instanceof BABYLON.Vector4 ? value : BABYLON.Vector4.FromArray(value as readonly [number, number, number, number]);
}

export interface EdgeUniforms {
  channelMode: number;
  blackLevel: number;
  strength: number;
  sampleStep: BABYLON.Vector2 | readonly [number, number];
  sampleStepUnit: number;
  edgeColor: BABYLON.Vector4 | readonly [number, number, number, number];
  alphaMode: number;
  composite: number;
}

export function setEdgeUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<EdgeUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.channelMode !== undefined) {
    material.setUInt('uniforms_channelMode', uniforms.channelMode);
  }
  if (uniforms.blackLevel !== undefined) {
    material.setFloat('uniforms_blackLevel', uniforms.blackLevel);
  }
  if (uniforms.strength !== undefined) {
    material.setFloat('uniforms_strength', uniforms.strength);
  }
  if (uniforms.sampleStep !== undefined) {
    material.setVector2('uniforms_sampleStep', ensureVector2(uniforms.sampleStep));
  }
  if (uniforms.sampleStepUnit !== undefined) {
    material.setUInt('uniforms_sampleStepUnit', uniforms.sampleStepUnit);
  }
  if (uniforms.edgeColor !== undefined) {
    material.setVector4('uniforms_edgeColor', ensureVector4(uniforms.edgeColor));
  }
  if (uniforms.alphaMode !== undefined) {
    material.setUInt('uniforms_alphaMode', uniforms.alphaMode);
  }
  if (uniforms.composite !== undefined) {
    material.setUInt('uniforms_composite', uniforms.composite);
  }
}

export type EdgeTextureName = 'src';
export interface EdgeInputs {
  src: ShaderSource;
}

export interface EdgeMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: EdgeTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: EdgeTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<EdgeUniforms>): void;
}

export interface EdgeMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createEdgeMaterial(scene: BABYLON.Scene, options: EdgeMaterialOptions = {}): EdgeMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Edge. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'EdgeMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = EdgeVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = EdgeFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_channelMode', 'uniforms_blackLevel', 'uniforms_strength', 'uniforms_sampleStep', 'uniforms_sampleStepUnit', 'uniforms_edgeColor', 'uniforms_alphaMode', 'uniforms_composite'],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: EdgeMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setEdgeUniforms(material, values),
  };

  return handles;
}

export class EdgeEffect extends CustomShaderEffect<EdgeUniforms, EdgeInputs> {
  effectName = 'Edge'

  constructor(engine: BABYLON.WebGPUEngine, inputs: EdgeInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createEdgeMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      textureBindingKeys: ['src'],
      passTextureSources: EdgePassTextureSources,
      passCount: 1,
      primaryTextureKey: 'src',
      width,
      height,
      materialName: 'EdgeMaterial',
      sampleMode,
      precision,
    })
    this.setUniforms({
      channelMode: 0,
      blackLevel: 0.0,
      strength: 1.0,
      sampleStep: [1.0, 1.0],
      sampleStepUnit: 1,
      edgeColor: [1.0, 1.0, 1.0, 1.0],
      alphaMode: 0,
      composite: 1,
    });
  }

  override setSrcs(inputs: Partial<EdgeInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { channelMode?: Dynamic<number>, blackLevel?: Dynamic<number>, strength?: Dynamic<number>, sampleStep?: Dynamic<BABYLON.Vector2 | readonly [number, number]>, sampleStepUnit?: Dynamic<number>, edgeColor?: Dynamic<BABYLON.Vector4 | readonly [number, number, number, number]>, alphaMode?: Dynamic<number>, composite?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.channelMode !== undefined) {
      record['channelMode'] = uniforms.channelMode;
    }
    if (uniforms.blackLevel !== undefined) {
      record['blackLevel'] = uniforms.blackLevel;
    }
    if (uniforms.strength !== undefined) {
      record['strength'] = uniforms.strength;
    }
    if (uniforms.sampleStep !== undefined) {
      record['sampleStep'] = uniforms.sampleStep;
    }
    if (uniforms.sampleStepUnit !== undefined) {
      record['sampleStepUnit'] = uniforms.sampleStepUnit;
    }
    if (uniforms.edgeColor !== undefined) {
      record['edgeColor'] = uniforms.edgeColor;
    }
    if (uniforms.alphaMode !== undefined) {
      record['alphaMode'] = uniforms.alphaMode;
    }
    if (uniforms.composite !== undefined) {
      record['composite'] = uniforms.composite;
    }
    super.setUniforms(record);
  }
}

