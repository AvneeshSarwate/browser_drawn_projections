// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const FluidVisualizeVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const FluidVisualizeFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_velocityScale: f32;
uniform uniforms_densityScale: f32;
uniform uniforms_tint: vec3f;
uniform uniforms_background: vec3f;
var state: texture_2d<f32>;
var stateSampler: sampler;

// Source fragment function
struct FluidVisualizeUniforms {
  velocityScale: f32, // 0.5
  densityScale: f32, // 1.0
  tint: vec3f, // [0.2, 0.6, 1.0]
  background: vec3f, // [0.02, 0.02, 0.025]
};

fn pass0(
  uv: vec2f,
  uniforms: FluidVisualizeUniforms,
  state: texture_2d<f32>,
  stateSampler: sampler,
) -> vec4f {
  let sample = textureSample(state, stateSampler, uv);
  let velocity = sample.xy;
  let density = clamp(sample.z * uniforms.densityScale, 0.0, 1.0);
  let curlIntensity = abs(sample.w);
  let swirlColor = vec3f(velocity.x, velocity.y, curlIntensity) * uniforms.velocityScale + vec3f(0.5);
  let densityColor = uniforms.tint * density;
  let color = mix(swirlColor, densityColor, density);
  color = mix(uniforms.background, color, clamp(density + curlIntensity * 0.25, 0.0, 1.0));
  return vec4f(color, 1.0);
}

fn load_FluidVisualizeUniforms() -> FluidVisualizeUniforms {
  return FluidVisualizeUniforms(
  uniforms.uniforms_velocityScale,
  uniforms.uniforms_densityScale,
  uniforms.uniforms_tint,
  uniforms.uniforms_background
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_FluidVisualizeUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, state, stateSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const FluidVisualizePassCount = 1 as const;
export const FluidVisualizePrimaryTextureName = 'state' as const;

export const FluidVisualizePassTextureSources = [
  [
    { binding: 'state', source: { kind: 'input', key: 'state' } },
  ],
] as const;

function ensureVector3(value: BABYLON.Vector3 | readonly [number, number, number]): BABYLON.Vector3 {
  return value instanceof BABYLON.Vector3 ? value : BABYLON.Vector3.FromArray(value as readonly [number, number, number]);
}

export interface FluidVisualizeUniforms {
  velocityScale: number;
  densityScale: number;
  tint: BABYLON.Vector3 | readonly [number, number, number];
  background: BABYLON.Vector3 | readonly [number, number, number];
}

export function setFluidVisualizeUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<FluidVisualizeUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.velocityScale !== undefined) {
    material.setFloat('uniforms_velocityScale', uniforms.velocityScale);
  }
  if (uniforms.densityScale !== undefined) {
    material.setFloat('uniforms_densityScale', uniforms.densityScale);
  }
  if (uniforms.tint !== undefined) {
    material.setVector3('uniforms_tint', ensureVector3(uniforms.tint));
  }
  if (uniforms.background !== undefined) {
    material.setVector3('uniforms_background', ensureVector3(uniforms.background));
  }
}

export type FluidVisualizeTextureName = 'state';
export interface FluidVisualizeInputs {
  state: ShaderSource;
}

export interface FluidVisualizeMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: FluidVisualizeTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: FluidVisualizeTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<FluidVisualizeUniforms>): void;
}

export interface FluidVisualizeMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createFluidVisualizeMaterial(scene: BABYLON.Scene, options: FluidVisualizeMaterialOptions = {}): FluidVisualizeMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for FluidVisualize. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'FluidVisualizeMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = FluidVisualizeVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = FluidVisualizeFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_velocityScale', 'uniforms_densityScale', 'uniforms_tint', 'uniforms_background'],
    samplers: ['state'],
    samplerObjects: ['stateSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'state': 'stateSampler' } as const;

  const handles: FluidVisualizeMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setFluidVisualizeUniforms(material, values),
  };

  return handles;
}

export class FluidVisualizeEffect extends CustomShaderEffect<FluidVisualizeUniforms, FluidVisualizeInputs> {
  effectName = 'FluidVisualize'

  constructor(engine: BABYLON.WebGPUEngine, inputs: FluidVisualizeInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createFluidVisualizeMaterial(sceneRef, options),
      textureInputKeys: ['state'],
      textureBindingKeys: ['state'],
      passTextureSources: FluidVisualizePassTextureSources,
      passCount: 1,
      primaryTextureKey: 'state',
      width,
      height,
      materialName: 'FluidVisualizeMaterial',
      sampleMode,
      precision,
    })
    this.setUniforms({
      velocityScale: 0.5,
      densityScale: 1.0,
      tint: [0.2, 0.6, 1.0],
      background: [0.02, 0.02, 0.025],
    });
  }

  override setSrcs(inputs: Partial<FluidVisualizeInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { velocityScale?: Dynamic<number>, densityScale?: Dynamic<number>, tint?: Dynamic<BABYLON.Vector3 | readonly [number, number, number]>, background?: Dynamic<BABYLON.Vector3 | readonly [number, number, number]> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.velocityScale !== undefined) {
      record['velocityScale'] = uniforms.velocityScale;
    }
    if (uniforms.densityScale !== undefined) {
      record['densityScale'] = uniforms.densityScale;
    }
    if (uniforms.tint !== undefined) {
      record['tint'] = uniforms.tint;
    }
    if (uniforms.background !== undefined) {
      record['background'] = uniforms.background;
    }
    super.setUniforms(record);
  }
}

