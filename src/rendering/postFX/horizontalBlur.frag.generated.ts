// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const HorizontalBlurVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const HorizontalBlurFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_pixels: i32;
uniform uniforms_resolution: f32;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
struct HorizontalBlurUniforms {
  pixels: i32,
  resolution: f32,
};

fn pass0(uv: vec2f, uniforms: HorizontalBlurUniforms, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  var color = vec4f(0.0);
  var total = 0.0;
  let offset = 1.0 / uniforms.resolution;
  var i: i32 = -uniforms.pixels;
  loop {
    let weight = 1.0 - (abs(f32(i)) / f32(uniforms.pixels + 1));
    let sampleUV = uv + vec2f(offset * f32(i), 0.0);
    color = color + textureSample(src, srcSampler, sampleUV) * weight;
    total = total + weight;
    if (i >= uniforms.pixels) {
      break;
    }
    i = i + 1;
  }
  return color / total;
}

fn load_HorizontalBlurUniforms() -> HorizontalBlurUniforms {
  return HorizontalBlurUniforms(
  uniforms.uniforms_pixels,
  uniforms.uniforms_resolution
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_HorizontalBlurUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const HorizontalBlurPassCount = 1 as const;
export const HorizontalBlurPrimaryTextureName = 'src' as const;

export const HorizontalBlurPassTextureSources = [
  [
    { binding: 'src', source: { kind: 'input', key: 'src' } },
  ],
] as const;

export interface HorizontalBlurUniforms {
  pixels: number;
  resolution: number;
}

export function setHorizontalBlurUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<HorizontalBlurUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.pixels !== undefined) {
    material.setInt('uniforms_pixels', uniforms.pixels);
  }
  if (uniforms.resolution !== undefined) {
    material.setFloat('uniforms_resolution', uniforms.resolution);
  }
}

export type HorizontalBlurTextureName = 'src';
export interface HorizontalBlurInputs {
  src: ShaderSource;
}

export interface HorizontalBlurMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: HorizontalBlurTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: HorizontalBlurTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<HorizontalBlurUniforms>): void;
}

export interface HorizontalBlurMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createHorizontalBlurMaterial(scene: BABYLON.Scene, options: HorizontalBlurMaterialOptions = {}): HorizontalBlurMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for HorizontalBlur. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'HorizontalBlurMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = HorizontalBlurVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = HorizontalBlurFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_pixels', 'uniforms_resolution'],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: HorizontalBlurMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setHorizontalBlurUniforms(material, values),
  };

  return handles;
}

export class HorizontalBlurEffect extends CustomShaderEffect<HorizontalBlurUniforms, HorizontalBlurInputs> {
  effectName = 'HorizontalBlur'

  constructor(engine: BABYLON.WebGPUEngine, inputs: HorizontalBlurInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createHorizontalBlurMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      textureBindingKeys: ['src'],
      passTextureSources: HorizontalBlurPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'src',
      width,
      height,
      materialName: 'HorizontalBlurMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<HorizontalBlurInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { pixels?: Dynamic<number>, resolution?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.pixels !== undefined) {
      record['pixels'] = uniforms.pixels;
    }
    if (uniforms.resolution !== undefined) {
      record['resolution'] = uniforms.resolution;
    }
    super.setUniforms(record);
  }
}

