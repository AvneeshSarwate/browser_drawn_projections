// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const InvertVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;
uniform uniforms_strength: f32;
var src: texture_2d<f32>;
var srcSampler: sampler;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const InvertFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_strength: f32;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
struct InvertUniforms {
  strength: f32,
};

fn pass0(uv: vec2f, uniforms: InvertUniforms, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  let color = textureSample(src, srcSampler, uv);
  let inverted = vec4f(1.0 - color.rgb, color.a);
  return mix(color, inverted, uniforms.strength);
}

fn load_InvertUniforms() -> InvertUniforms {
  return InvertUniforms(
  uniforms.uniforms_strength
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_InvertUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const InvertPassCount = 1 as const;
export const InvertPrimaryTextureName = 'src' as const;

export interface InvertUniforms {
  strength: number;
}

export function setInvertUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<InvertUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.strength !== undefined) {
    material.setFloat('uniforms_strength', uniforms.strength);
  }
}

export type InvertTextureName = 'src';
export interface InvertInputs {
  src: ShaderSource;
}

export interface InvertMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: InvertTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: InvertTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<InvertUniforms>): void;
}

export interface InvertMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createInvertMaterial(scene: BABYLON.Scene, options: InvertMaterialOptions = {}): InvertMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Invert. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'InvertMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = InvertVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = InvertFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_strength'],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: InvertMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setInvertUniforms(material, values),
  };

  return handles;
}

export class InvertEffect extends CustomShaderEffect<InvertUniforms, InvertInputs> {
  effectName = 'Invert'

  constructor(engine: BABYLON.WebGPUEngine, inputs: InvertInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createInvertMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      passCount: 1,
      primaryTextureKey: 'src',
      width,
      height,
      materialName: 'InvertMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<InvertInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { strength?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.strength !== undefined) {
      record['strength'] = uniforms.strength;
    }
    super.setUniforms(record);
  }
}

