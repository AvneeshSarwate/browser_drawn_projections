// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision } from '../shaderFXBabylon';
export const LayerBlendVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const LayerBlendFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
var src1: texture_2d<f32>;
var src1Sampler: sampler;
var src2: texture_2d<f32>;
var src2Sampler: sampler;

// Source fragment function
fn pass0(uv: vec2f, src1: texture_2d<f32>, src1Sampler: sampler, src2: texture_2d<f32>, src2Sampler: sampler) -> vec4f {
  let color1 = textureSample(src1, src1Sampler, uv);
  let color2 = textureSample(src2, src2Sampler, uv);
  let returnColor = select(color2, color1, color1.a > 0.01);
  return returnColor;
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, src1, src1Sampler, src2, src2Sampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const LayerBlendPassCount = 1 as const;
export const LayerBlendPrimaryTextureName = 'src1' as const;

export const LayerBlendPassTextureSources = [
  [
    { binding: 'src1', source: { kind: 'input', key: 'src1' } },
    { binding: 'src2', source: { kind: 'input', key: 'src2' } },
  ],
] as const;

export type LayerBlendUniforms = Record<string, never>;
export function setLayerBlendUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<LayerBlendUniforms>): void {}

export type LayerBlendTextureName = 'src1' | 'src2';
export interface LayerBlendInputs {
  src1: ShaderSource;
  src2: ShaderSource;
}

export interface LayerBlendMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: LayerBlendTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: LayerBlendTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<LayerBlendUniforms>): void;
}

export interface LayerBlendMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createLayerBlendMaterial(scene: BABYLON.Scene, options: LayerBlendMaterialOptions = {}): LayerBlendMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for LayerBlend. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'LayerBlendMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = LayerBlendVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = LayerBlendFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['src1', 'src2'],
    samplerObjects: ['src1Sampler', 'src2Sampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src1': 'src1Sampler', 'src2': 'src2Sampler' } as const;

  const handles: LayerBlendMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class LayerBlendEffect extends CustomShaderEffect<LayerBlendUniforms, LayerBlendInputs> {
  effectName = 'LayerBlend'

  constructor(engine: BABYLON.WebGPUEngine, inputs: LayerBlendInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createLayerBlendMaterial(sceneRef, options),
      textureInputKeys: ['src1', 'src2'],
      textureBindingKeys: ['src1', 'src2'],
      passTextureSources: LayerBlendPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'src1',
      width,
      height,
      materialName: 'LayerBlendMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<LayerBlendInputs>): void {
    super.setSrcs(inputs);
  }
}

