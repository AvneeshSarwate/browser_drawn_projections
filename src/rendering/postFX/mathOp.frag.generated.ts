// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const MathOpVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;
uniform uniforms_preAdd: f32;
uniform uniforms_postAdd: f32;
uniform uniforms_mult: f32;
uniform uniforms_colorOnly: bool;
var src: texture_2d<f32>;
var srcSampler: sampler;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const MathOpFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_preAdd: f32;
uniform uniforms_postAdd: f32;
uniform uniforms_mult: f32;
uniform uniforms_colorOnly: bool;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
struct MathOpUniforms {
  preAdd: f32,
  postAdd: f32,
  mult: f32,
  colorOnly: bool,
};

fn pass0(uv: vec2f, uniforms: MathOpUniforms, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  let color = textureSample(src, srcSampler, uv);
  let factor = uniforms.mult + uniforms.preAdd;
  let offset = vec4f(uniforms.postAdd, uniforms.postAdd, uniforms.postAdd, uniforms.postAdd);
  let color2 = color * factor + offset;
  if (uniforms.colorOnly) {
    return vec4f(color2.rgb, color.a);
  }
  return color2;
}

fn load_MathOpUniforms() -> MathOpUniforms {
  return MathOpUniforms(
  uniforms.uniforms_preAdd,
  uniforms.uniforms_postAdd,
  uniforms.uniforms_mult,
  uniforms.uniforms_colorOnly
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_MathOpUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const MathOpPassCount = 1 as const;
export const MathOpPrimaryTextureName = 'src' as const;

export const MathOpPassTextureSources = [
  [
    { binding: 'src', source: { kind: 'input', key: 'src' } },
  ],
] as const;

export interface MathOpUniforms {
  preAdd: number;
  postAdd: number;
  mult: number;
  colorOnly: boolean;
}

export function setMathOpUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<MathOpUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.preAdd !== undefined) {
    material.setFloat('uniforms_preAdd', uniforms.preAdd);
  }
  if (uniforms.postAdd !== undefined) {
    material.setFloat('uniforms_postAdd', uniforms.postAdd);
  }
  if (uniforms.mult !== undefined) {
    material.setFloat('uniforms_mult', uniforms.mult);
  }
  if (uniforms.colorOnly !== undefined) {
    material.setFloat('uniforms_colorOnly', (uniforms.colorOnly ? 1 : 0));
  }
}

export type MathOpTextureName = 'src';
export interface MathOpInputs {
  src: ShaderSource;
}

export interface MathOpMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: MathOpTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: MathOpTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<MathOpUniforms>): void;
}

export interface MathOpMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createMathOpMaterial(scene: BABYLON.Scene, options: MathOpMaterialOptions = {}): MathOpMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for MathOp. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'MathOpMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = MathOpVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = MathOpFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_preAdd', 'uniforms_postAdd', 'uniforms_mult', 'uniforms_colorOnly'],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: MathOpMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setMathOpUniforms(material, values),
  };

  return handles;
}

export class MathOpEffect extends CustomShaderEffect<MathOpUniforms, MathOpInputs> {
  effectName = 'MathOp'

  constructor(engine: BABYLON.WebGPUEngine, inputs: MathOpInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createMathOpMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      textureBindingKeys: ['src'],
      passTextureSources: MathOpPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'src',
      width,
      height,
      materialName: 'MathOpMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<MathOpInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { preAdd?: Dynamic<number>, postAdd?: Dynamic<number>, mult?: Dynamic<number>, colorOnly?: Dynamic<boolean> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.preAdd !== undefined) {
      record['preAdd'] = uniforms.preAdd;
    }
    if (uniforms.postAdd !== undefined) {
      record['postAdd'] = uniforms.postAdd;
    }
    if (uniforms.mult !== undefined) {
      record['mult'] = uniforms.mult;
    }
    if (uniforms.colorOnly !== undefined) {
      record['colorOnly'] = uniforms.colorOnly;
    }
    super.setUniforms(record);
  }
}

