// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderInputs } from '../shaderFXBabylon';
export const PassthruVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2f;
var src: texture_2d<f32>;
var srcSampler: sampler;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4f(input.position, 1.0);
  vertexOutputs.vUV = input.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const PassthruFragmentSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2f;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
fn passthru(uv: vec2f, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  return textureSample(src, srcSampler, uv);
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uv_local = input.vUV;
  let color = passthru(uv_local, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`;

export type PassthruUniforms = Record<string, never>;
export function setPassthruUniforms(_material: BABYLON.ShaderMaterial, _uniforms: Partial<PassthruUniforms>): void {}

export type PassthruTextureName = 'src';
export interface PassthruMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: PassthruTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: PassthruTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<PassthruUniforms>): void;
}

export interface PassthruMaterialOptions {
  name?: string;
}

export function createPassthruMaterial(scene: BABYLON.Scene, options: PassthruMaterialOptions = {}): PassthruMaterialHandles {
  const name = options.name ?? 'PassthruMaterial';
  const material = new BABYLON.ShaderMaterial(name, scene, {
    vertexSource: PassthruVertexSource,
    fragmentSource: PassthruFragmentSource,
  }, {
    attributes: ['position', 'uv'],
    uniforms: [],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: PassthruMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: () => {},
  };

  return handles;
}

export class PassthruEffect extends CustomShaderEffect<PassthruUniforms> {
  effectName = 'Passthru'

  constructor(engine: BABYLON.WebGPUEngine, inputs: ShaderInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createPassthruMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      width,
      height,
      materialName: 'PassthruMaterial',
      sampleMode,
    })
  }
}

