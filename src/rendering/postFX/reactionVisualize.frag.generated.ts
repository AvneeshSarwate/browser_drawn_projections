// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const ReactionVisualizeVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const ReactionVisualizeFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_colorA: vec3f;
uniform uniforms_colorB: vec3f;
uniform uniforms_edgeColor: vec3f;
uniform uniforms_contrast: f32;
var state: texture_2d<f32>;
var stateSampler: sampler;

// Source fragment function
struct ReactionVisualizeUniforms {
  colorA: vec3f, // [0.1, 0.05, 0.12]
  colorB: vec3f, // [0.9, 0.95, 0.8]
  edgeColor: vec3f, // [0.2, 0.3, 0.6]
  contrast: f32, // 1.4
};

fn softSaturate(value: vec3f) -> vec3f {
  return clamp(value, vec3f(0.0), vec3f(1.0));
}

fn pass0(
  uv: vec2f,
  uniforms: ReactionVisualizeUniforms,
  state: texture_2d<f32>,
  stateSampler: sampler,
) -> vec4f {
  let sample = textureSample(state, stateSampler, uv);
  let a = sample.x;
  let b = sample.y;
  let pigment = clamp(sample.z, 0.0, 1.0);
  let mixFactor = clamp(pow(b - a, uniforms.contrast), 0.0, 1.0);
  let baseColor = mix(uniforms.colorA, uniforms.colorB, mixFactor);
  let finalColor = mix(baseColor, uniforms.edgeColor, pigment);
  return vec4f(softSaturate(finalColor), 1.0);
}

fn load_ReactionVisualizeUniforms() -> ReactionVisualizeUniforms {
  return ReactionVisualizeUniforms(
  uniforms.uniforms_colorA,
  uniforms.uniforms_colorB,
  uniforms.uniforms_edgeColor,
  uniforms.uniforms_contrast
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_ReactionVisualizeUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, state, stateSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const ReactionVisualizePassCount = 1 as const;
export const ReactionVisualizePrimaryTextureName = 'state' as const;

export const ReactionVisualizePassTextureSources = [
  [
    { binding: 'state', source: { kind: 'input', key: 'state' } },
  ],
] as const;

function ensureVector3(value: BABYLON.Vector3 | readonly [number, number, number]): BABYLON.Vector3 {
  return value instanceof BABYLON.Vector3 ? value : BABYLON.Vector3.FromArray(value as readonly [number, number, number]);
}

export interface ReactionVisualizeUniforms {
  colorA: BABYLON.Vector3 | readonly [number, number, number];
  colorB: BABYLON.Vector3 | readonly [number, number, number];
  edgeColor: BABYLON.Vector3 | readonly [number, number, number];
  contrast: number;
}

export function setReactionVisualizeUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<ReactionVisualizeUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.colorA !== undefined) {
    material.setVector3('uniforms_colorA', ensureVector3(uniforms.colorA));
  }
  if (uniforms.colorB !== undefined) {
    material.setVector3('uniforms_colorB', ensureVector3(uniforms.colorB));
  }
  if (uniforms.edgeColor !== undefined) {
    material.setVector3('uniforms_edgeColor', ensureVector3(uniforms.edgeColor));
  }
  if (uniforms.contrast !== undefined) {
    material.setFloat('uniforms_contrast', uniforms.contrast);
  }
}

export type ReactionVisualizeTextureName = 'state';
export interface ReactionVisualizeInputs {
  state: ShaderSource;
}

export interface ReactionVisualizeMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: ReactionVisualizeTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: ReactionVisualizeTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<ReactionVisualizeUniforms>): void;
}

export interface ReactionVisualizeMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createReactionVisualizeMaterial(scene: BABYLON.Scene, options: ReactionVisualizeMaterialOptions = {}): ReactionVisualizeMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for ReactionVisualize. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'ReactionVisualizeMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = ReactionVisualizeVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = ReactionVisualizeFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_colorA', 'uniforms_colorB', 'uniforms_edgeColor', 'uniforms_contrast'],
    samplers: ['state'],
    samplerObjects: ['stateSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'state': 'stateSampler' } as const;

  const handles: ReactionVisualizeMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setReactionVisualizeUniforms(material, values),
  };

  return handles;
}

export class ReactionVisualizeEffect extends CustomShaderEffect<ReactionVisualizeUniforms, ReactionVisualizeInputs> {
  effectName = 'ReactionVisualize'

  constructor(engine: BABYLON.WebGPUEngine, inputs: ReactionVisualizeInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createReactionVisualizeMaterial(sceneRef, options),
      textureInputKeys: ['state'],
      textureBindingKeys: ['state'],
      passTextureSources: ReactionVisualizePassTextureSources,
      passCount: 1,
      primaryTextureKey: 'state',
      width,
      height,
      materialName: 'ReactionVisualizeMaterial',
      sampleMode,
      precision,
    })
    this.setUniforms({
      colorA: [0.1, 0.05, 0.12],
      colorB: [0.9, 0.95, 0.8],
      edgeColor: [0.2, 0.3, 0.6],
      contrast: 1.4,
    });
  }

  override setSrcs(inputs: Partial<ReactionVisualizeInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { colorA?: Dynamic<BABYLON.Vector3 | readonly [number, number, number]>, colorB?: Dynamic<BABYLON.Vector3 | readonly [number, number, number]>, edgeColor?: Dynamic<BABYLON.Vector3 | readonly [number, number, number]>, contrast?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.colorA !== undefined) {
      record['colorA'] = uniforms.colorA;
    }
    if (uniforms.colorB !== undefined) {
      record['colorB'] = uniforms.colorB;
    }
    if (uniforms.edgeColor !== undefined) {
      record['edgeColor'] = uniforms.edgeColor;
    }
    if (uniforms.contrast !== undefined) {
      record['contrast'] = uniforms.contrast;
    }
    super.setUniforms(record);
  }
}

