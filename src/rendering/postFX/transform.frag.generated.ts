// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const TransformVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const TransformFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_rotate: f32;
uniform uniforms_anchor: vec2f;
uniform uniforms_translate: vec2f;
uniform uniforms_scale: vec2f;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
struct TransformUniforms {
  rotate: f32,
  anchor: vec2f,
  translate: vec2f,
  scale: vec2f,
};

fn pass0(uv: vec2f, uniforms: TransformUniforms, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  var uvLocal = uv - uniforms.anchor;
  uvLocal = uvLocal * uniforms.scale;
  let cosR = cos(uniforms.rotate);
  let sinR = sin(uniforms.rotate);
  let rotated = vec2f(
    uvLocal.x * cosR - uvLocal.y * sinR,
    uvLocal.x * sinR + uvLocal.y * cosR,
  ) + uniforms.anchor + uniforms.translate;
  return textureSample(src, srcSampler, rotated);
}

fn load_TransformUniforms() -> TransformUniforms {
  return TransformUniforms(
  uniforms.uniforms_rotate,
  uniforms.uniforms_anchor,
  uniforms.uniforms_translate,
  uniforms.uniforms_scale
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_TransformUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const TransformPassCount = 1 as const;
export const TransformPrimaryTextureName = 'src' as const;

export const TransformPassTextureSources = [
  [
    { binding: 'src', source: { kind: 'input', key: 'src' } },
  ],
] as const;

function ensureVector2(value: BABYLON.Vector2 | readonly [number, number]): BABYLON.Vector2 {
  return value instanceof BABYLON.Vector2 ? value : BABYLON.Vector2.FromArray(value as readonly [number, number]);
}

export interface TransformUniforms {
  rotate: number;
  anchor: BABYLON.Vector2 | readonly [number, number];
  translate: BABYLON.Vector2 | readonly [number, number];
  scale: BABYLON.Vector2 | readonly [number, number];
}

export function setTransformUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<TransformUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.rotate !== undefined) {
    material.setFloat('uniforms_rotate', uniforms.rotate);
  }
  if (uniforms.anchor !== undefined) {
    material.setVector2('uniforms_anchor', ensureVector2(uniforms.anchor));
  }
  if (uniforms.translate !== undefined) {
    material.setVector2('uniforms_translate', ensureVector2(uniforms.translate));
  }
  if (uniforms.scale !== undefined) {
    material.setVector2('uniforms_scale', ensureVector2(uniforms.scale));
  }
}

export type TransformTextureName = 'src';
export interface TransformInputs {
  src: ShaderSource;
}

export interface TransformMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: TransformTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: TransformTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<TransformUniforms>): void;
}

export interface TransformMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createTransformMaterial(scene: BABYLON.Scene, options: TransformMaterialOptions = {}): TransformMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Transform. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'TransformMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = TransformVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = TransformFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_rotate', 'uniforms_anchor', 'uniforms_translate', 'uniforms_scale'],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: TransformMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setTransformUniforms(material, values),
  };

  return handles;
}

export class TransformEffect extends CustomShaderEffect<TransformUniforms, TransformInputs> {
  effectName = 'Transform'

  constructor(engine: BABYLON.WebGPUEngine, inputs: TransformInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createTransformMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      textureBindingKeys: ['src'],
      passTextureSources: TransformPassTextureSources,
      passCount: 1,
      primaryTextureKey: 'src',
      width,
      height,
      materialName: 'TransformMaterial',
      sampleMode,
      precision,
    })
    this.setUniforms({ rotate: 0, anchor: [0.5, 0.5], translate: [0, 0], scale: [1, 1] });
  }

  override setSrcs(inputs: Partial<TransformInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { rotate?: Dynamic<number>, anchor?: Dynamic<BABYLON.Vector2 | readonly [number, number]>, translate?: Dynamic<BABYLON.Vector2 | readonly [number, number]>, scale?: Dynamic<BABYLON.Vector2 | readonly [number, number]> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.rotate !== undefined) {
      record['rotate'] = uniforms.rotate;
    }
    if (uniforms.anchor !== undefined) {
      record['anchor'] = uniforms.anchor;
    }
    if (uniforms.translate !== undefined) {
      record['translate'] = uniforms.translate;
    }
    if (uniforms.scale !== undefined) {
      record['scale'] = uniforms.scale;
    }
    super.setUniforms(record);
  }
}

