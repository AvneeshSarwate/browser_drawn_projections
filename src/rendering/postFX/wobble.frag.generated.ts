// Auto-generated by wgsl fragment generator. DO NOT EDIT.
import * as BABYLON from 'babylonjs';
import { CustomShaderEffect, type ShaderSource, type RenderPrecision, type ShaderUniforms, type Dynamic } from '../shaderFXBabylon';
export const WobbleVertexSource = `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
attribute position: vec3<f32>;
attribute uv: vec2<f32>;
varying vUV: vec2<f32>;

#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
  vertexOutputs.position = vec4<f32>(vertexInputs.position, 1.0);
  vertexOutputs.vUV = vertexInputs.uv;
#define CUSTOM_VERTEX_MAIN_END
}

`;
export const WobbleFragmentSources = [
  `// Auto-generated by wgsl fragment generator. DO NOT EDIT.
varying vUV: vec2<f32>;
uniform uniforms_xStrength: f32;
uniform uniforms_yStrength: f32;
uniform uniforms_time: f32;
var src: texture_2d<f32>;
var srcSampler: sampler;

// Source fragment function
struct WobbleUniforms {
  xStrength: f32,
  yStrength: f32,
  time: f32,
};

fn pass0(uv: vec2f, uniforms: WobbleUniforms, src: texture_2d<f32>, srcSampler: sampler) -> vec4f {
  var uvLocal = uv;
  var uv2 = uvLocal;
  uv2.x = uv2.x + sin(uvLocal.y * 10.0 + uniforms.time * 2.0) * uniforms.xStrength;
  uv2.y = uv2.y + cos(uvLocal.x * 10.0 + uniforms.time * 2.0) * uniforms.yStrength;
  let color = textureSample(src, srcSampler, uv2);
  return color;
}

fn load_WobbleUniforms() -> WobbleUniforms {
  return WobbleUniforms(
  uniforms.uniforms_xStrength,
  uniforms.uniforms_yStrength,
  uniforms.uniforms_time
  );
}

#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs) -> FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
  let uniforms_value = load_WobbleUniforms();
  let uv_local = fragmentInputs.vUV;
  let color = pass0(uv_local, uniforms_value, src, srcSampler);
  fragmentOutputs.color = color;
#define CUSTOM_FRAGMENT_MAIN_END
}

`, // pass0
] as const;
export const WobblePassCount = 1 as const;
export const WobblePrimaryTextureName = 'src' as const;

export const WobblePassTextureSources = [
  [
    { binding: 'src', source: { kind: 'input', key: 'src' } },
  ],
] as const;

export interface WobbleUniforms {
  xStrength: number;
  yStrength: number;
  time: number;
}

export function setWobbleUniforms(material: BABYLON.ShaderMaterial, uniforms: Partial<WobbleUniforms>): void {
  if (!uniforms) {
    return;
  }
  if (uniforms.xStrength !== undefined) {
    material.setFloat('uniforms_xStrength', uniforms.xStrength);
  }
  if (uniforms.yStrength !== undefined) {
    material.setFloat('uniforms_yStrength', uniforms.yStrength);
  }
  if (uniforms.time !== undefined) {
    material.setFloat('uniforms_time', uniforms.time);
  }
}

export type WobbleTextureName = 'src';
export interface WobbleInputs {
  src: ShaderSource;
}

export interface WobbleMaterialHandles {
  material: BABYLON.ShaderMaterial;
  setTexture(name: WobbleTextureName, texture: BABYLON.BaseTexture): void;
  setTextureSampler(name: WobbleTextureName, sampler: BABYLON.TextureSampler): void;
  setUniforms(uniforms: Partial<WobbleUniforms>): void;
}

export interface WobbleMaterialOptions {
  name?: string;
  passIndex?: number;
}

export function createWobbleMaterial(scene: BABYLON.Scene, options: WobbleMaterialOptions = {}): WobbleMaterialHandles {
  const passIndex = options.passIndex ?? 0;
  if (passIndex < 0 || passIndex >= 1) {
    throw new Error(`Invalid passIndex ${passIndex} for Wobble. Expected 0 <= passIndex < 1.`);
  }
  const baseName = options.name ?? 'WobbleMaterial';
  const shaderName = `${baseName}_pass${passIndex}`;
  // Register shaders in the WGSL store to enable preprocessor
  const vertexShaderName = `${shaderName}VertexShader`;
  const fragmentShaderName = `${shaderName}FragmentShader`;
  
  BABYLON.ShaderStore.ShadersStoreWGSL[vertexShaderName] = WobbleVertexSource;
  BABYLON.ShaderStore.ShadersStoreWGSL[fragmentShaderName] = WobbleFragmentSources[passIndex];
  
  const material = new BABYLON.ShaderMaterial(shaderName, scene, {
    vertex: shaderName,
    fragment: shaderName,
  }, {
    attributes: ['position', 'uv'],
    uniforms: ['uniforms_xStrength', 'uniforms_yStrength', 'uniforms_time'],
    samplers: ['src'],
    samplerObjects: ['srcSampler'],
    shaderLanguage: BABYLON.ShaderLanguage.WGSL,
  });

  const samplerLookup = { 'src': 'srcSampler' } as const;

  const handles: WobbleMaterialHandles = {
    material,
    setTexture: (name, texture) => material.setTexture(name, texture),
    setTextureSampler: (name, sampler) => material.setTextureSampler(samplerLookup[name], sampler),
    setUniforms: (values) => setWobbleUniforms(material, values),
  };

  return handles;
}

export class WobbleEffect extends CustomShaderEffect<WobbleUniforms, WobbleInputs> {
  effectName = 'Wobble'

  constructor(engine: BABYLON.WebGPUEngine, inputs: WobbleInputs, width = 1280, height = 720, sampleMode: 'nearest' | 'linear' = 'linear', precision: RenderPrecision = 'half_float') {
    super(engine, inputs, {
      factory: (sceneRef, options) => createWobbleMaterial(sceneRef, options),
      textureInputKeys: ['src'],
      textureBindingKeys: ['src'],
      passTextureSources: WobblePassTextureSources,
      passCount: 1,
      primaryTextureKey: 'src',
      width,
      height,
      materialName: 'WobbleMaterial',
      sampleMode,
      precision,
    })
  }

  override setSrcs(inputs: Partial<WobbleInputs>): void {
    super.setSrcs(inputs);
  }

  override setUniforms(uniforms: { xStrength?: Dynamic<number>, yStrength?: Dynamic<number>, time?: Dynamic<number> }): void {
    const record: ShaderUniforms = {};
    if (uniforms.xStrength !== undefined) {
      record['xStrength'] = uniforms.xStrength;
    }
    if (uniforms.yStrength !== undefined) {
      record['yStrength'] = uniforms.yStrength;
    }
    if (uniforms.time !== undefined) {
      record['time'] = uniforms.time;
    }
    super.setUniforms(record);
  }
}

